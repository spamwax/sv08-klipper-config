[heater_generic chamber_heater]
gcode_id: chamber_heater
heater_pin: expander:PA1
sensor_type: Generic 3950
sensor_pin: expander:PA6
control: watermark
max_delta: 1
min_temp: 10
max_temp: 60

[verify_heater chamber_heater]
max_error: 10000000
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 600
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.

[gcode_macro CHAMBER_HEAT_STOP]
description: Stop chamber heater loop
gcode:
  SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
  RESPOND MSG="Chamber heater stopped!"
  M117 Chamber stopped!

[gcode_macro CHAMBER_HEAT_START]
description: Start chamber heater with TARGET temp
gcode:
  {% set target = params.TARGET|float %}
  {% set safety_limit = 65 %}
  {% if target > safety_limit %}
    CHAMBER_HEAT_STOP
    {action_raise_error("Target temp is above safety limit of {}°C".format(safety_limit))} 
  {% endif %}
  SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={target}
  {% if target == 0 %}
    CHAMBER_HEAT_STOP
  {% else %}
    M117 Chamber heating...
    RESPOND MSG="Chamber heating started (target={target}°C, delta={delta})"
  {% endif %}

# [temperature_sensor chamber_sensor]
# sensor_type: Generic 3950
# sensor_pin: expander:PA6
# pullup_resistor: 4700
# min_temp: 0
# max_temp: 80

# [output_pin chamber_heater_pin]
# pin: expander:PA1
# pwm: False
# value: 0

# [gcode_macro _CHAMBER_HEAT_STATE]
# variable_enabled: 0
# variable_target: 40
# variable_delta: 1.0
# variable_last_temp: 0
# variable_last_state: "off"
# variable_safety_limit: 65
# gcode:
#     RESPOND MSG="Use CHAMBER_HEAT_START TARGET=<temp> [DELTA=<hyst>] to start"

# [delayed_gcode chamber_heat_loop]
# initial_duration: 10
# gcode:
#   {% set enabled = printer["gcode_macro _CHAMBER_HEAT_STATE"].enabled|default(0)|int %}
#   {% if not enabled %}
#     # Not active, do nothing
#     UPDATE_DELAYED_GCODE ID=chamber_heat_loop DURATION=0
#   {% else %}
#     {% set temp = printer["temperature_sensor chamber_sensor"].temperature|default(0)|float %}
#     {% set target = printer["gcode_macro _CHAMBER_HEAT_STATE"].target %}
#     {% set delta = printer["gcode_macro _CHAMBER_HEAT_STATE"].delta %}
#     {% set last_state = printer["gcode_macro _CHAMBER_HEAT_STATE"].last_state|default("off") %}
#     {% set safety_limit = printer["gcode_macro _CHAMBER_HEAT_STATE"].safety_limit|default(65) %}
#     # Save last temp
#     SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=last_temp VALUE={temp}
#     # Heater logic
#     {% if temp < (target - delta) %}
#       SET_PIN PIN=chamber_heater_pin VALUE=1
#       SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=last_state VALUE='"on"'
#     {% elif temp > (target + delta) %}
#       SET_PIN PIN=chamber_heater_pin VALUE=0
#       SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=last_state VALUE='"off"'
#       {% if temp > safety_limit %}
#         RESPOND MSG="WARNING: Chamber temp high ({temp}°C) with heater off!"
#         BEEPC COUNT=6
#       {% endif %}
#     {% else %}
#       # Maintain current state
#       SET_PIN PIN=chamber_heater_pin VALUE={1 if last_state == "on" else 0}
#     {% endif %}
#     UPDATE_DELAYED_GCODE ID=chamber_heat_loop DURATION=10
#   {% endif %}

# [gcode_macro CHAMBER_HEAT_START]
# description: Start chamber heater loop with TARGET temp and optional DELTA hysteresis
# gcode:
#   {% set target = params.TARGET|float %}
#   {% set delta = params.DELTA|default(5.0)|float %}
#   {% set safety_limit = printer["gcode_macro _CHAMBER_HEAT_STATE"].safety_limit|default(65) %}
#   {% if target > safety_limit %}
#     SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=enabled VALUE=0
#     UPDATE_DELAYED_GCODE ID=chamber_heat_loop DURATION=0
#     {action_raise_error("Target temp is above safety limit of {}°C".format(safety_limit))} 
#   {% endif %}
#   SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=enabled VALUE=1
#   SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=target VALUE={target}
#   SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=delta VALUE={delta}
#   {% if target == 0 %}
#       CHAMBER_HEAT_STOP
#   {% else %}
#     RESPOND MSG="Chamber heating started (target={target}°C, delta={delta})"
#     UPDATE_DELAYED_GCODE ID=chamber_heat_loop DURATION=1
#   {% endif %}


# [gcode_macro CHAMBER_HEAT_STOP]
# description: Stop chamber heater loop
# gcode:
#   SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=enabled VALUE=0
#   SET_GCODE_VARIABLE MACRO=_CHAMBER_HEAT_STATE VARIABLE=last_state VALUE='"off"'
#   SET_PIN PIN=chamber_heater_pin VALUE=0
#   RESPOND MSG="Chamber heater stopped!"
#   M117 Chamber heater stopped!
#   UPDATE_DELAYED_GCODE ID=chamber_heat_loop DURATION=0
