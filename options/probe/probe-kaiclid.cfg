# Configuration for the stock Kaiclid probe.
[gcode_macro KaiclidVars]
description: Set custom probe variables
# Nozzle-homing positions
variable_home_xy: [288.3, 362.0]
# variable_home_z_speed: 1.0
variable_bed_z_clearance: 8.0
# Probe-state variables
variable_batch_mode_enabled: False
variable_probe_state: "stowed"
# Docking positions for the Kaiclid probe. Different Zs are for before and after QGL.
variable_pos1: [0, 352.7, 13.9]
variable_pos2: [0, 352.7, 13.0]
variable_pos3: [0, 352.7, 13.0]
variable_ypos_separate: 362
# Other variables
variable_probe_safe_z: 40
gcode:
  RESPOND TYPE=command MSG="{ printer['gcode_macro CustomProbeVars'] }"

[probe]
pin: ^!extra_mcu:PB6
x_offset: -26.34 # -17 # -25 
y_offset: 8.57 # 10
# You can find the z_offset option in the printer.cfg
# z_offset : 0
speed: 5 # 10.0
samples: 3
sample_retract_dist: 5 # 2
lift_speed: 60
samples_result: median
samples_tolerance: 0.015
samples_tolerance_retries: 3

[bed_mesh]
speed: 400
horizontal_move_z: 33 # 40 # 5
mesh_min: 6,17
mesh_max: 323,341 # 333,340
probe_count: 9,9
algorithm: bicubic
bicubic_tension: 0.4
split_delta_z: 0.016
mesh_pps:3,3
adaptive_margin: 5
fade_start: 0
fade_end: 10
fade_target: 0

[gcode_macro STOW_PROBE]
gcode:
    _ASSERT_HOMED
    M118 Started STOW_PROBE
    {% set kaiclid_probe = printer["gcode_macro KaiclidVars"] %}
    {% set last_query_state = kaiclid_probe.probe_state %}
    {action_respond_info("üü¢ Probe state: {} üü¢".format(last_query_state))}
    # QUERY_PROBE
    # {% if not printer.probe.last_query %}
        # M118 Docking Kaiclid Probe.
        
        SAVE_GCODE_STATE NAME=STOW_PROBE
        SET_GCODE_OFFSET Z=0.0
        _dock_kaiclid
        RESTORE_GCODE_STATE NAME=STOW_PROBE
        
        {% if kaiclid_probe.batch_mode_enabled %}
            ASSERT_PROBE_DEPLOYED
        {% else %}
            ASSERT_PROBE_STOWED
        {% endif %}
        G4 P5000
    # {% else %}
    #     M118 ü§∑üèΩ‚Äç‚ôÄÔ∏è Probe is already detached.
    # {% endif %}

# MP""""""`MM M""""""""M MMP"""""YMM M""MMM""MMM""M
# M  mmmmm..M Mmmm  mmmM M' .mmm. `M M  MMM  MMM  M
# M.      `YM MMMM  MMMM M  MMMMM  M M  MMP  MMP  M
# MMMMMMM.  M MMMM  MMMM M  MMMMM  M M  MM'  MM' .M
# M. .MMM'  M MMMM  MMMM M. `MMM' .M M  `' . '' .MM
# Mb.     .dM MMMM  MMMM MMb     dMM M    .d  .dMMM
# MMMMMMMMMMM MMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMMMM
[gcode_macro _dock_kaiclid]
description: Dock the Kaiclid probe
gcode:
    {% set vars = printer["gcode_macro KaiclidVars"] %}
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        {action_raise_error("Home the printer first!")}
    {% endif %}
    {% if printer.quad_gantry_level.applied|lower != 'true' %}
        {% set dock_position = vars.pos1 %}
    {% else %}
        {% set dock_position = vars.pos2 %}
        # {% set dock_position = {"x": 0.5, "y": 352, "z": 12} %}
    {% endif %}
    {% set x = dock_position[0] %}
    {% set y = dock_position[1] %}
    {% set z = dock_position[2] %}
    {% set y_sep = vars.ypos_separate %}
    {% if vars.batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not docking"
    {% else %}
        RESPOND TYPE=command MSG="Docking Kaiclid Probe."
        ; ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED
        #{action_respond_info("is quaded: {}".format(printer.quad_gantry_level.applied|lower == 'true'))}
        {action_respond_info("dock_position: {}, {}, {}".format(x, y, z))}
        G90
        G1 Z{vars.probe_safe_z} F1500
        G1 X175 Y175 F20000
        G1 X{x} F10000
        G1 Z{z} F1200
        G1 Y330 F20000
        G1 Y340 F10000
        G1 Y{y} F1200
        G1 Y{y_sep} F12000
        G1 X100 F20000
        # Remove it after the circuit is built to invert the logic of the Kailh keyboard switch.
        SET_GCODE_VARIABLE MACRO=KaiclidVars VARIABLE=probe_state VALUE="'stowed'"
        ASSERT_PROBE_STOWED
        G1 Z20 F1200
        G1 X175 Y175 F12000
        M400
    {% endif %}

[gcode_macro DEPLOY_PROBE]
gcode:
    _ASSERT_HOMED
    M118 Started DEPLOY_PROBE
    {% set kaiclid_probe = printer["gcode_macro KaiclidVars"] %}
    {% set last_query_state = kaiclid_probe.probe_state %}
    {action_respond_info("üü¢ Probe state: {} üü¢".format(last_query_state))}
    # QUERY_PROBE
    # {% if printer.probe.last_query %}
    
        SAVE_GCODE_STATE NAME=DEPLOY_PROBE
        SET_GCODE_OFFSET Z=0.0
        _undock_kaiclid
        RESTORE_GCODE_STATE NAME=DEPLOY_PROBE

        ASSERT_PROBE_DEPLOYED
        G4 P5000
        # {action_raise_error("ERROR: ATTACH the probe manually!")}
    # {% else %}
    #     M118 ü§∑üèΩ‚Äç‚ôÄÔ∏è Probe is already attached.
    # {% endif %}


# M""""""'YMM MM""""""""`M MM"""""""`YM M""MMMMMMMM MMP"""""YMM M""MMMM""M
# M  mmmm. `M MM  mmmmmmmM MM  mmmmm  M M  MMMMMMMM M' .mmm. `M M. `MM' .M
# M  MMMMM  M M`      MMMM M'        .M M  MMMMMMMM M  MMMMM  M MM.    .MM
# M  MMMMM  M MM  MMMMMMMM MM  MMMMMMMM M  MMMMMMMM M  MMMMM  M MMMb  dMMM
# M  MMMM' .M MM  MMMMMMMM MM  MMMMMMMM M  MMMMMMMM M. `MMM' .M MMMM  MMMM
# M       .MM MM        .M MM  MMMMMMMM M         M MMb     dMM MMMM  MMMM
# MMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMM
[gcode_macro _undock_kaiclid]
description: Un-Dock the Kaiclid probe
gcode:
    {% set vars = printer["gcode_macro KaiclidVars"] %}
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        {action_raise_error("Home the printer first!")}
    {% endif %}
    {% if printer.quad_gantry_level.applied|lower != 'true' %}
        {% set dock_position = vars.pos1 %}
    {% else %}
        {% set dock_position = vars.pos2 %}
    {% endif %}
    {% set x = dock_position[0] %}
    {% set y = dock_position[1] %}
    {% set z = dock_position[2] %}
    {% set y_sep = vars.ypos_separate %}
    {action_respond_info("dock_position: {}, {}, {}".format(x, y, z))}

    {% if vars.batch_mode_enabled and vars.probe_state == "deployed" %}
        ASSERT_PROBE_DEPLOYED
        RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
    {% else %}
        ASSERT_PROBE_STOWED
        RESPOND TYPE=command MSG="Fetching Kaiclid Probe."
        G90
        G1 Z30 F1500
        G1 X175 Y175 F20000
        G1 X100 Y{y} F12000
        G1 Y{y_sep} F8000
        G1 Z{z+0.5} F1500
        G1 X{x} F15000
        G1 Y{y} F10000   
        G1 Y340 F1500
        G1 Y300 F15000
        G1 Z{vars.probe_safe_z} F1500
        G1 X175 Y175 F12000
        M400
        # Remove it after the circuit is built to invert the logic of the Kailh keyboard switch.
        SET_GCODE_VARIABLE MACRO=KaiclidVars VARIABLE=probe_state VALUE="'deployed'"
        ASSERT_PROBE_DEPLOYED
    {% endif %}
    
[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    M117 Printer online

[gcode_macro _ASSERT_HOMED]
gcode:
    {% set homedaxes=printer.toolhead.homed_axes|lower %}
    {% if homedaxes != 'xyz' %}
        {action_raise_error("You need to home all axis first!")}
    {% else %}
        M118 Printer is homed, continuing...
    {% endif %}

[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    {% set kaiclid_probe = printer["gcode_macro KaiclidVars"] %}
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    # {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% set last_query_state = kaiclid_probe.probe_state %}
    # {action_respond_info("DEBUG: kaiclid_probe.probe_state: {}, last_query_state: {}, params.MUST_BE: {}".format(kaiclid_probe.probe_state, last_query_state, params.MUST_BE))}
    {% if params.MUST_BE != last_query_state %}
    # {% if False %}
        BEEPC COUNT=5
        { action_respond_info("‚ùóExpected probe state to be {} but it is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        # { action_respond_info("üçÑüçÑ FAKE passing the assertion until we build the circuit to invert the logic of the Kailh keyboard switch. üçÑüçÑ") }
        SET_GCODE_VARIABLE MACRO=KaiclidVars VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}

[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P150
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed

[gcode_macro ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P150
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

# MP""""""`MM M""""""""M MMP"""""""MM M#"""""""'M  M""MMMMMMMM MM""""""""`M              M""""""""`M
# M  mmmmm..M Mmmm  mmmM M' .mmmm  MM ##  mmmm. `M M  MMMMMMMM MM  mmmmmmmM              Mmmmmm   .M
# M.      `YM MMMM  MMMM M         `M #'        .M M  MMMMMMMM M`      MMMM              MMMMP  .MMM
# MMMMMMM.  M MMMM  MMMM M  MMMMM  MM M#  MMMb.'YM M  MMMMMMMM MM  MMMMMMMM              MMP  .MMMMM
# M. .MMM'  M MMMM  MMMM M  MMMMM  MM M#  MMMM'  M M  MMMMMMMM MM  MMMMMMMM              M' .MMMMMMM
# Mb.     .dM MMMM  MMMM M  MMMMM  MM M#       .;M M         M MM        .M              M         M
# MMMMMMMMMMM MMMMMMMMMM MMMMMMMMMMMM M#########M  MMMMMMMMMMM MMMMMMMMMMMM oooooooooooo MMMMMMMMMMM
[stable_z_home]
gcode:
#  The G-code to run before each probe attempt. The default is none.
retries: 10
#  The maximum number of probe attempts allowed. The default is 20.
#window:
#  The number of samples to use in the tolerance window. The default is 4.
retry_tolerance: 0.01
#  The maximum range between the min and max values of the Z offset in the window
#  to consider the offset stable and complete the procedure. The default is
#  0.0025mm.


# M""MMMMM""MM MMP"""""YMM M"""""`'"""`YM M""M M"""""""`YM MM'"""""`MM
# M  MMMMM  MM M' .mmm. `M M  mm.  mm.  M M  M M  mmmm.  M M' .mmm. `M
# M         `M M  MMMMM  M M  MMM  MMM  M M  M M  MMMMM  M M  MMMMMMMM
# M  MMMMM  MM M  MMMMM  M M  MMM  MMM  M M  M M  MMMMM  M M  MMM   `M
# M  MMMMM  MM M. `MMM' .M M  MMM  MMM  M M  M M  MMMMM  M M. `MMM' .M
# M  MMMMM  MM MMb     dMM M  MMM  MMM  M M  M M  MMMMM  M MM.     .MM
# MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMMMM MMMM MMMMMMMMMMM MMMMMMMMMMM
[homing_override]
axes: xyz
gcode:
  {% set do_z = False %}
  {% set vars = printer["gcode_macro KaiclidVars"] %}
  {% set config = printer.configfile.settings %}
  {% set sensorless_speed = config.stepper_x.homing_speed %}
  {% set szh = printer['gcode_macro _MY_STABLEZHOME_'] %}

  {% if "y" not in (printer.toolhead.homed_axes | lower) %}
      {% set y_homed = False %}
  {% else %}
      {% set y_homed = True %}
  {% endif %}
  {% if "x" not in (printer.toolhead.homed_axes | lower) %}
      {% set x_homed = False %}
  {% else %}
      {% set x_homed = True %}
  {% endif %}
  {% if "z" not in (printer.toolhead.homed_axes | lower) %}
      {% set z_homed = False %}
  {% else %}
      {% set z_homed = True %}
  {% endif %}

  G90 ; set absolute positioning
  SET_KINEMATIC_POSITION Z=0
  G1 Z{vars.bed_z_clearance} F1500

  {% if params.Z is defined %}
      {% set do_z = True %}
  {% endif %}
  {% if params.Y is defined %}
      {% set do_y = True %}
  {% endif %}
  {% if params.X is defined %}
      {% set do_x = True %}
  {% endif %}
  {% if not rawparams %}
      M118 "Runnign full G28"
      {% set do_z = True %}
  {% endif %}

  # home Y and X, X first to avoid running into the dock
  {% if not y_homed or not x_homed %}
      RESPOND MSG='{"Homing X/Y Axis (%.1f mm/s)" % sensorless_speed}'
      # Pause to ensure driver stall flag is clear
      # G4 P2000
      G1 F{sensorless_speed*60}
      G28 X
      G1 X{vars.home_xy[0] - 20} F6000
      # Pause to ensure driver stall flag is clear
      G4 P2000
      G1 F{sensorless_speed*60}
      G28 Y
      G1 Y{vars.home_xy[1] - 20} F6000
  {% endif %}
  
  {% if do_z %}
    # ASSERT_PROBE_STOWED
    {% if szh.first_z_run or not szh.batch_mode_enabled %}
        RESPOND MSG='{"Homing Z Axis %.1f" % -(vars.bed_z_clearance - config.stepper_z.position_endstop)}'
        G1 X{vars.home_xy[0]} F6000
        G1 Y{vars.home_xy[1]} F6000
        G91
        {% set dz = vars.bed_z_clearance - config.stepper_z.position_endstop %}
        # G1 Z{-(vars.bed_z_clearance - config.stepper_z.position_endstop)} F1200
        G1 Z-{dz} F1200
    {% endif %}
    G90
    G0 F{config.stepper_z.homing_speed*60}
    # M400
    G28 Z # Let the firmware lower Z until switch is activated 
    G91
    # G1 Z{config.stepper_z.homing_retract_dist} F{config.stepper_z.homing_retract_speed*60}
    G90
    
    {% if szh.batch_mode_enabled %} # Don't go to center if we are running STABLE_Z_HOME command
        {% if szh.first_z_run %}
            SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=first_z_run VALUE=False
            RESPOND TYPE=command MSG="STABLE_Z_HOME mode enabled: Staying above Z endstop!"
        {% endif %}
    {% else %}
        # Move away from docking area
        M400
        G0 Z{ config.stepper_z.homing_retract_dist + vars.bed_z_clearance} F1200
        G0 X177.5 Y177.5 F6000 
    {% endif %}
  {% endif %}

  # {% if not rawparams or 'X' in rawparams %}
  #   {action_respond_info('Homing X')}
  #   G28 X
  #   G90 ; set absolute positioning
  #   G0 X177.5 F6000 ; return to center
  #   M400 ; Wait for move to finish
  # {% endif %}
  # {% if not rawparams or 'Y' in rawparams %}
  #   {action_respond_info('Homing Y')}
  #   G28 Y
  #   G90 ; set absolute positioning
  #   G0 Y177.5 F6000 ; return to center
  #   M400 ; Wait for move to finish
  # {% endif %}
  # {% if not rawparams or 'Z' in rawparams %}
  #   {action_respond_info('Homing Z')}
  #   G90 ; set absolute positioning
  #   G0 X177.5 Y177.5 F6000 ; return to center, please add your offsets manually if you want to
  #   G28 Z
  #   G91 ; set relative positioning
  #   G0 Z5 F1000 ; 5mm up
  #   M400 ; Wait for move to finish
  # {% endif %}
  # G90 ; set absolute positioning

    
